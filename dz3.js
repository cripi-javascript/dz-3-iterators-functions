/*jslint regexp: true, browser: true, devel: true, newcap: true, plusplus: true */
/**
 * Возвращает объект Event
 *
 * @param {Object} EventData                             Объект - событие
 * @param {Number|Date} EventData.start                  Начало события
 * @param {Number|Date} EventData.end                    Конец события
 * @param {Number} EventData.rate                        Рейтинг события от 1 до 5(по умолчанию 1)
 * @param {String} EventData.place    [place="Земля"]    Место проведения
 * @param {Number} EventData.numbParticipants            Количество участников
 * @param {String} EventData.participants                Имена участников через запятую
 * @param {String} EventData.regularity                  Регулярность(ежедневно, еженедельно, ежемесячно(по умолчанию), ежегодно)
 * @param {String} EventData.comment                     Комментарий
 * @param {String} EventData.name     [name="Событие"]   Имя события
 *
 * @example
 *    Event(new Date('2011-10-10T14:48:00'),
 *          new Date('2011-10-11T14:48:00'),
 *          5,
 *          "Офис",
 *          3,
 *          "Петя,Вася,Коля",
 *          "Еженедельно",
 *          "Какой-то комментарий",
 *          "Встреча")
 *
 * @return {Object}
 */

function isNumber(n) {
    'use strict';
    return !isNaN(parseFloat(n)) && isFinite(n);
}

//проверка даты
function isDate(input) {
    'use strict';
    var date, reg = /([1-9]|[12][0-9]|3[01]).(0[1-9]|1[012]).(19|20)\d\d/;
    if (input.match(reg)) {
        date = true;
    } else {
        date = false;
    }
    return date;
}

//проверка времени
function isTime(input) {
    'use strict';
    var time, reg = /^([0-9]|[1][0-9]|2[0-3]):([1-5][0-9]|[0-9])$/;
    if (input.match(reg)) {
        time = true;
    } else {
        time = false;
    }
    return time;
}

//создание объекта
function Event(EventData) {
    'use strict';
    var startDate, endDate, startTime, endTime, participantsNames = [], start, end, rate, place, numbParticipants, participants, regularity, comment, name;
    start = EventData.start;
    end = EventData.end;
    rate = EventData.rate;
    place = EventData.place;
    numbParticipants = EventData.numbParticipants;
    participants = EventData.participants;
    regularity = EventData.regularity;
    comment = EventData.comment;
    name = EventData.name;
    startDate = start.getDate() + '/' + (start.getMonth() + 1) + '/' + start.getFullYear();
    endDate = end.getDate() + '/' + (end.getMonth() + 1) + '/' + end.getFullYear();
    startTime = start.getUTCHours() + ':' + start.getUTCMinutes();
    endTime = end.getUTCHours() + ':' + end.getUTCMinutes();
    if (!isDate(startDate)) {
        console.log("Please enter start date in dd/mm/yyyy format instead: " + startDate);
        return;
    }
    if (!isDate(endDate)) {
        console.log("Please enter end date in dd/mm/yyyy format instead:" + endDate);
        return;
    }
    if (!isTime(startTime)) {
        console.log("Please enter start date time in 24 format hh:mm instead: " + startTime);
        return;
    }
    if (!isTime(endTime)) {
        console.log("Please enter end date time in 24 format hh:mm instead: " + endTime);
        return;
    }
    if ((!isNumber(rate) && rate !== "") || (rate > 5 || rate < 1)) {
        console.log("Error in rating (Rating must be in range from 1 to 5)");
        return;
    }
    if (!isNumber(numbParticipants)) {
        console.log("Wrong number of participants");
        return;
    }
    participantsNames = participants.split(',');
    if (participantsNames.length !== numbParticipants) {
        console.log("Please check number of participants");
        return;
    }
    return {
        "start": EventData.start,
        "end": EventData.end,
        "rating": EventData.rate || 1,
        "place": EventData.place || "Земля",
        "numbParticipants": EventData.numbParticipants,
        "participants": EventData.participants,
        "regularity": EventData.regularity || "Ежемесячно",
        "commentary": EventData.comment,
        "name": EventData.name || "Событие"
    };
}

//получаем произвольное целое число в интервале
function randomFromInterval(from, to) {
    'use strict';
    return Math.floor(Math.random() * (to - from + 1)) + from;
}

var todayDate = new Date(),
    places = ["Earth", "Mars", "Jupiter", "Yekaterinburg", "New York", "Saint-Petersburg", "Moscow", "London", "UrFU"],
    someParticipants = ["Paulita", "Jesus", "Jeanette", "Reatha", "Reina", "Evelina", "Kimber", "Irwin", "Kellye", "Duane", "Charisse", "Rosalva", "Keitha", "Theola", "Irma", "Sharen", "Somer", "Napoleon", "Tien", "Suzie"],
// names generated by http://listofrandomnames.com/;
    randomRegularity = ["ежедневно", "еженедельно", "ежемесячно", "ежегодно"],
    collectionEvents = [],
    j,
    collection,
    maximumDate,
    minimumDate,
    nearEventWithOut,
    weekEvents,
    lastEvents,
    interEvents,
    newStart,
    newEnd,
    newNumbParticipants,
	futureEventWith;

//добавление n дней к текущей
function addDays(n) {
    'use strict';
    return new Date(todayDate.getTime() + 24 * 60 * 60 * 1000 * n);
}

//добавление столько дней, сколько осталось до конца недели
function week() {
    'use strict';
    return new Date(addDays(7 - todayDate.getDay()).getTime());
}

//выбираем случайным образом участников и случайного набора участников
function chooseParticipant(n) {
    'use strict';
    var i, a, added, s = "";
    for (i = 0; i < n; i++) {
        added = false;
        while (!added) {
            a = someParticipants[randomFromInterval(0, 19)];
            if (s.indexOf(a) === -1) {
                if (i !== n - 1) {
                    s = s + a + ",";
                } else {
                    s = s + a;
                }
                added = true;
            } else {
                added = false;
            }
        }
    }
    return s;
}

//создаем случайные комментарии
function randomComment() {
    'use strict';
    var chars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz",
        string_length = randomFromInterval(1, 30),
        randomcomment = '',
        rnum,
        i;
    for (i = 0; i < string_length; i++) {
        rnum = Math.floor(Math.random() * chars.length);
        randomcomment += chars.substring(rnum, rnum + 1);
    }
    return randomcomment;
}

//заполнение коллекции событий 21м случайным событием
for (j = 0; j < 21; j++) {
    newStart = new Date(addDays(randomFromInterval(-30, 30)).getTime());
    newEnd = new Date(newStart.getTime() + randomFromInterval(1, 24 * 60 * 60 * 1000));
    newNumbParticipants = randomFromInterval(2, 20);
    collectionEvents[j] = new Event({
        start: newStart,
        end: newEnd,
        rate: randomFromInterval(1, 5),
        place: places[randomFromInterval(0, 8)],
        numbParticipants: newNumbParticipants,
        participants: chooseParticipant(newNumbParticipants),
        regularity: randomRegularity[randomFromInterval(0, 3)],
        comment: randomComment(),
        name: "Event" + j
    });
}

//Сортировки
//сортировка по дате или по рейтингу в определенном интервале дат
function Sorting(collectionforSort, startDate, endDate, parametr) {
    'use strict';
    var selection = collectionforSort.filter(function (Event) {return (Event.start >= startDate && Event.end <= endDate); });
    if (parametr === "date") {
        return selection.sort(function (Event1, Event2) {return (Event1.start - Event2.start); });
    }
    if (parametr === "rating") {
        return selection.sort(function (Event1, Event2) {return (Event1.rating - Event2.rating); });
    }
}

//сортировка по дате или по рейтингу с параметром с участием человека или без("with" или "without")
function SortingSelection(startDate, endDate, parametrSort, parametrWith, who) {
    'use strict';
    var sortSelect;
    if (parametrWith === "with") {
        sortSelect = collectionEvents.filter(function (Event) {return (Event.participants.indexOf(who) !== -1); });
    }
    if (parametrWith === "without") {
        sortSelect = collectionEvents.filter(function (Event) {return (Event.participants.indexOf(who) === -1); });
    }
    sortSelect = Sorting(sortSelect, startDate, endDate, parametrSort);
    return sortSelect;
}

console.log("Выборки");
maximumDate = new Date(addDays(500000).getTime());
minimumDate = new Date(addDays(-500000).getTime());
console.log("Выбрать все предстоящие события с моим участием отсортированные по рейтигу");
futureEventWith = SortingSelection(todayDate, maximumDate, "rating", "with", "Jesus");
if (futureEventWith.length > 0) {
    futureEventWith.forEach(function (Event) {
        'use strict';
        console.log(Event.name + ":  Start of event: " + Event.start + ", Rating: " + Event.rating + ", Participants: " + Event.participants);
    });
}

console.log("Выбрать ближайшее (по времени) событие без моего участия");
nearEventWithOut = SortingSelection(todayDate, maximumDate, "date", "without", "Jesus");
if (nearEventWithOut.length > 0) {
    console.log(nearEventWithOut[0].name + ":  Start of event: " + nearEventWithOut[0].start + ", Rating: " + nearEventWithOut[0].rating + ", Participants: " + nearEventWithOut[0].participants);
} else {
    console.log("No event");
}

console.log("Выбрать все события, которые произойдут на этой неделе, отсортированые по рейтингу");
weekEvents = Sorting(collectionEvents, todayDate, week(), "rating");
if (weekEvents.length > 0) {
    weekEvents.forEach(function (Event) {
        'use strict';
        console.log(Event.name + ":  Start of event: " + Event.start + ", Rating: " + Event.rating + ", Participants: " + Event.participants);
    });
} else {
    console.log("No event");
}

console.log("Выбрать все события, которые произошли до сегодняшнего дня, отсортированные по дате от ближайшей к ранней");
lastEvents = Sorting(collectionEvents, minimumDate, todayDate, "date").reverse();
if (lastEvents.length > 0) {
    lastEvents.forEach(function (Event) {
        'use strict';
        console.log(Event.name + ":  Start of event: " + Event.start + ", Rating: " + Event.rating + ", Participants: " + Event.participants);
    });
} else {
    console.log("No event");
}

console.log("Выбрать все события между 15 и 25 ноября и отсортировать по убыванию рейтинга");
interEvents = Sorting(collectionEvents, new Date('2012-11-15T00:00:00'), new Date('2012-11-25T00:00:00'), "rating").reverse();
if (interEvents.length > 0) {
    interEvents.forEach(function (Event) {
        'use strict';
        console.log(Event.name + ":  Start of event: " + Event.start + ", Rating: " + Event.rating + ", Participants: " + Event.participants);
	});
} else {
    console.log("No event");
}